#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <iostream>

using namespace std;
using namespace cv;

// Code runs on odroid to send frames to the server

void error(const char *msg)
{
    perror(msg);
    exit(0);
}

int main(int argc, char *argv[])
{
    int sockfd, portno, n,imgSize;                       
    struct sockaddr_in serv_addr;
    struct hostent *server;                     

    char buffer[256];     
    if (argc < 3) {
       fprintf(stderr,"usage %s hostname port\n", argv[0]);
       exit(0);
    }

    portno = atoi(argv[2]);

    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd < 0) 
        error("ERROR opening socket");

    server = gethostbyname(argv[1]);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &serv_addr, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;

    bcopy((char *)server->h_addr, 
         (char *)&serv_addr.sin_addr.s_addr,
         server->h_length);

    serv_addr.sin_port = htons(portno);
    
    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) 
        error("ERROR connecting");

   
    //CvCapture* capture = 0;
    Mat frame, frameCopy, image;
    namedWindow( "result",1 );
 
    


   /* capture = cvCaptureFromCAM( 0 ); //0=default, -1=any camera, 1..99=your camera
    if(!capture) cout << "No camera detected" << endl;

    cvNamedWindow( "result", CV_WINDOW_AUTOSIZE );
    cvSetCaptureProperty( capture, CV_CAP_PROP_FRAME_WIDTH, 600);

    cvSetCaptureProperty( capture, CV_CAP_PROP_FRAME_HEIGHT, 400);
    */

    VideoCapture cap(0);
    if (!cap.isOpened())
    {
        cout << "Cannot open camera" << endl;
        return -1;
    }
   cap.set(CV_CAP_PROP_FRAME_WIDTH,cap.get(CV_CAP_PROP_FRAME_WIDTH)/2);
   cap.set(CV_CAP_PROP_FRAME_HEIGHT,cap.get(CV_CAP_PROP_FRAME_HEIGHT)/2);


    //if( capture )
    //{
        cout << "In capture ..." << endl;
        for(;;)
        {
          //frame = cvQueryFrame( capture );
          bool bSuccess = cap.read(frame);


          vector<int> compression_params; //vector that stores the compression parameters of the image

          compression_params.push_back(CV_IMWRITE_JPEG_QUALITY); //specify the compression technique

           compression_params.push_back(98); //specify the compression quality



           bool Success = imwrite("TestImage.jpg", img, compression_params); //write the image to file









          if( frame.empty())
          break;
         
          imshow("result", frame);
          
          frame = (frame.reshape(0,1)); // to make it continuous

          imgSize = frame.total()*frame.elemSize();
          cout<<imgSize<<endl;
          
          //send
          n = send(sockfd, frame.data, imgSize, 0);
        
          if(n < 0)
            cout<<"Failed to send."<<endl;
         // else
           // cout<<"Sent a frame of size "<<n<<endl;


         if( waitKey(1) >= 0 )
         break;

        }

        waitKey(0);
    //}
    
    //cvReleaseCapture( &capture );
    cvDestroyWindow( "result" );
    return 0;
}

